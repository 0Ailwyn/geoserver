.. _extensions_wps_remote_install_python:

Deployment And Setup Of The XMPP Python Wrappers
================================================

Remote WPS Python Wrapper Framework
+++++++++++++++++++++++++++++++++++

The Remote WPS Python framework source code is available on a public GitHub Repository of GeoSolutions S.A.S.

The users can clone the repository at the following address:

  https://github.com/geosolutions-it/wps-remote-backend-XMPP
  
The source code is available on the **master** branch.

How The System Works
++++++++++++++++++++

This setup will configure the Remote WPS Python Wrapper to launch a Python executable called ``test.py`` that performs a ``gdal_contour`` on a GeoTIFF DEM.

The ``test.py`` executable takes in input just two parameters:

* ``-i``; "--interval", nargs='?', default="10", help="Elevation interval between contours."
* ``-w``; "--workdir", nargs='?', default="", help="Remote process sandbox working directory."

The paths of the command line and GeoTIFF to process (provided with the source code as sample data), are hardcoded into the Python code and must be changed accordingly to the system settings as explained later in the docs:

* ``gdalContour = r'/usr/bin/gdal_contour'``
* ``src = r'/share/xmpp_data/resource_dir/srtm_39_04/srtm_39_04_c.tif'``

The assumptions are that during the execution, the algorythms send logging and progress info to the standard output in a form similar to the following one:

.. code-block:: shell
  
  2016-02-15 15:18:03,594 - main.create_logger - [INFO] ProgressInfo:100%
  
The log format has been configured through the ``logger_test.properties`` file:

.. code-block:: shell

  [loggers]
  keys=root
  
  [handlers]
  keys=consoleHandler
  
  [formatters]
  keys=simpleFormatter
  
  [logger_root]
  level=DEBUG
  handlers=consoleHandler
  
  [handler_consoleHandler]
  class=StreamHandler
  level=DEBUG
  formatter=simpleFormatter
  args=(sys.stdout,)
  
  [formatter_simpleFormatter]
  format=%(asctime)s - %(name)s - [%(levelname)s] %(message)s
  datefmt=

The role of the Remote WPS Python wrapper is to take care of the communication between GeoServer WPS and the ``test.py`` executable.

The Python wrapper must be configured by specifying the number and type of input and output parameters of the executable, other than the connection parameter of the remote XMPP Server. 
The Python wrapper knows how to invoke the executables from the command line and how to parse and interpret the logging information thanks to some properties files containing a set of regular expressions which will be presented in details further in this document.

There must be a running instance of the Python wrapper for each executable, every one with its own specific configuration and XMPP user. 
The wrapper instances will connect automatically to the XMPP Server and GeoServer will send an **"invite"** message as soon it recognizes a new authenticated user appearing on the XMPP communication channels. 
In order to register the WPS Process into the GeoServer through the Remote Process Factory, the Python wrapper must reply to the invitation with a **"register"** message containing all the details about the I/O params of the executable. 
All those passages are managed automatically and transparently to the users by the Remote WPS Python framework.

Everytime a user issues a new GeoServer WPS execute request, the Python wrapper starts a new thread calling the executables with the input parameters coming from GeoServer itself. 
The two running instances are connected through a unique “process execution ID” generated by GeoServer Remote Process Factory.

From now on, the Python wrapper thread follows the entire execution and takes care of sending feedbacks and logging information to the GeoServer Remote Process Factory, which are translated and forwarded to the GeoServer WPS Execution Manager. 
From the outside the users will experience a standard execution of an OGC WPS compliant process.

Summary Of The Configuration Steps
++++++++++++++++++++++++++++++++++

Connecting a new executable instance to GeoServer through the Python wrapper requires few configuration steps summarized here below:

1. **Clone a structure of** ``.properties`` **files containing:**
    - The connection parameter to the XMPP Server
    - The descriptor of the executable command line
    - The descriptor of the process I/O parameters
    - The logging informations

2. **Update the** ``remote.config`` **file with the correct XMPP Server information:**
    - Provide remote host and port parameters
    - Provide domain and XMPP communication secured channels details
    - Provide pointers to the shared folder
    
3. **Update the** ``logger.properties`` **file with the full path to the** ``service.log`` **file.**

4. **Update the** ``service.config`` **file with the executables parameters:**
    - The service name and the namespace

      .. note::

        there must exist an user on the XMPP Server named as ``namespace.serviceName`` and a communication channel with the same identified of the service namespace.
        
        
        e.g.:
        
        - service = gdalContour
        - namespace = default
        
        means that on the XMPP Server we are looking for a communication channel named ``default`` and we will try to connect with the username ``default.gdalContour``.
        
        Both of them must be defined before running the Python wrapper daemon.

    - The description of the service and the full path to the main executable
    - Other secondary parameters like the local output folder (where to store temporary results of the execution) and the max running time
    - The description of the Inputs and the actions to be taken
    - The description of the Outputs and the actions to be taken
    - The description of the logging information and the actions to be taken
    
Installation and Configuration Steps
====================================

Basic Environment Preparation
+++++++++++++++++++++++++++++

The following commands will prepare a MS Windows 7+, Windows 2008+ Server ISO machine for the deployment of:

1. Remote WPS Python wrapper
2. Sample configuration and testing of a sample executable ``test.py`` running the ``gdal_contour`` on a GeoTIFF DEM

**Preparation of the system: standard and basic OS packages**

*Python*

The system requires Python 2.7.9+ with few packages in order to work correctly. The installation of Python on a Windows system is quite fast

.. code-block:: shell

  # as administrator
  
  #.1 Download the Python 2.7.9 installation package from the browser, chosing the best suitable distribution accordingly to the OS
  
    https://www.python.org/downloads/release/python-279/
  
  #.2 Define the following System Environment Variables
  
  PATH=%PATH%;C:\Python27;C:\Python27\Scripts
  PYTHONPATH=.\;C:\Python27;C:\work\RemoteWPS

*Other Mandatory Python Packages*

.. code-block:: shell

  # as administrator
  
  # From a Command Line prompt
  
  $> pip install psutil
  $> pip install jsonschema
  $> pip install path.py
  $> pip install argparse
  $> pip install sleekxmpp

**Configure the RemoteWPS Environment**

*NFS Shared Folder*

Link the shared folder to the ``C:/share`` through the NFS protocol. This is possible simply by turning on the NFS Services of the MS Windows functionalities and creating a client NFS connection to the NFS server.

.. warning:: "Services for NFS" have been removed on Windows 10. They are available only on Windows 10 Enterprise edition. For older Windows versions you can use the following procedure in order to enable NFS Client

    **Installing the client**
    
    1. Go to Control Panel → Programs → Programs and Features
    2. Select: Turn Windows features on or off" from the left hand navigation.
    3. Scroll down to "Services for NFS" and click the "plus" on the left
    4. Check "Client for NFS"
    5. Select "Ok"
    6. Windows should install the client. Once the client package is install you will have the "mount" command available.
    
    **Mounting the export**
    
    This assumes the following:
    
    * You know and can ping the hostname of the machine with the NFS exports
    * The name of the exported filesystem ( eg. /export, /home/users, /some/cool/file/path )
    * The file systems are properly exported and accessible
    
      - Open a command prompt. ( ``Win`` + ``R``, enter "cmd" and press OK )
      - Type:
      
         ``mount \\{machinename}\{filesystem} {driveletter}``
     
    Examples::
    
        mount \\filehost\home\users H:
        mount \\server1234\long\term\file\storage S:
        mount \\nas324\exports E:
        
    
.. note:: It is important that the shared folder structure is fully replicated on the Windows machine and the folder writable by the Windows processes.

    .. code-block:: shell

          | /share
          |
          |-- xmpp_data
          |
          |-- -- output
          |
          |-- -- resource_dir
 
First Deploy Of The RemoteWPS Python Framework
++++++++++++++++++++++++++++++++++++++++++++++

Clone the RemoteWPS Python Framework into a working folder, e.g.:

.. code-block:: shell

    $> cd C:\work
    
    $> git clone https://github.com/geosolutions-it/wps-remote-backend-XMPP RemoteWPS
    
**Setting Up The** ``remote.config``

.. code-block:: shell

  # Edit the file c:/work/RemoteWPS/xmpp_data/configs/remote.config
  
  [DEFAULT]
  
  bus_class_name = xmppBus.XMPPBus
  
  port = 5223
  address = <XMPP_server_ip_address>
  domain = geoserver.org
  user = default.GdalContour
  password = R3m0T3wP5
  
  mucService = conference.%(domain)s
  mucServicePassword = R3m0T3wP5
  
  resource_file_dir = /share/xmpp_data/resource_dir
  wps_execution_shared_dir = /share
  
The requisites for this configuration to work properly are:

    1. Make sure the ``<XMPP_server_ip_address>`` is reachable and the port **5223** is allowed by the Firewall
    2. Make sure the ``default.GdalContour`` user exists into the XMPP Server and that the password is correct
    
    .. figure:: images/python001.jpg
      :align: center
      
    3. The MUC Service and the MUC Service Password are correct
    4. The resource dir and the shared folder exists and are writable
    
**Setting Up The** ``logger.properties``

.. code-block:: shell

  # Edit the file c:/work/RemoteWPS/xmpp_data/configs/logger.properties
  
  [loggers]
  keys=root
  
  [handlers]
  keys=consoleHandler,file
  
  [formatters]
  keys=simpleFormatter,consoleFormatter
  
  [logger_root]
  level=DEBUG
  handlers=file, consoleHandler
  
  [handler_consoleHandler]
  class=StreamHandler
  level=DEBUG
  formatter=consoleFormatter
  args=(sys.stdout,)
  filter=
  
  [handler_file]
  class=handlers.TimedRotatingFileHandler
  interval=midnight
  backupCount=5
  formatter=simpleFormatter
  level=DEBUG
  args=('/share/xmpp_data/service.log',)
  
  [formatter_simpleFormatter]
  format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
  datefmt=
  
  [formatter_consoleFormatter]
  format=%(asctime)s [%(levelname)s] %(message)s
  datefmt=

The requisites for this configuration to work properly are:

    1. Make sure the “C:/share/xmpp_data/” exists and is writable

**Setting Up The** ``service.config``

.. code-block:: shell

  # Edit the file c:/work/RemoteWPS/xmpp_data/configs/myservice/service.config

  # ########################################### #
  # Default Service Params                      #
  # ########################################### #
  
  [DEFAULT]
  service = GdalContour
  namespace = default
  description = GDAL Contour Remote Service
  executable_path = /work/RemoteWPS/xmpp_data/configs/myservice/code
  executable_cmd = python %(executable_path)s/test.py
  output_dir = /share/xmpp_data/output/
  unique_execution_id = %(unique_exe_id)s
  workdir = %(output_dir)s/%(unique_execution_id)s
  active = True
  max_running_time_seconds = 300
  
  # ########################################### #
  # Inputs and Actions Declaration              #
  # ########################################### #
  
  [Input1]
  class = param
  name = interval
  title = Elevation Interval
  type = int
  description = Elevation interval between contours.
  min = 1
  max = 1
  default = 200
  
  [Action1]
  class = cmdline
  input_ref = interval
  alias = i
  template = -name value
  
  [Const1]
  class = const
  name = workdir
  type = string
  description = Remote process sandbox working directory
  value = %(workdir)s
  
  [Action2]
  class = cmdline
  input_ref = workdir
  alias = w
  template = -name value
  
  # ########################################### #
  # Output Parameters Declaration               #
  # ########################################### #
  
  [Output1]
  name = result1
  type = application/zip
  description = WPS Resource Binary File
  title = SRTM
  filepath = %(workdir)s/contour.zip
  publish_as_layer = true
  publish_default_style = polygon
  publish_target_workspace = it.geosolutions
  publish_layer_name = contour
  
  [Logging]
  #note the order
  stdout_parser = [.*\[DEBUG\](.*), .*\[INFO\] ProgressInfo\:([-+]?[0-9]*\.?[0-9]*)\%, .*\[(INFO)\](.*), .*\[(WARN)\](.*), .*\[(ERROR)\](.*), .*\[(CRITICAL)\](.*)]
  stdout_action = [ignore,          progress,                                          log,              log,              log,               abort]

The requisites for this configuration to work properly are:

    1. Make sure the ``default.GdalContour`` user exists into the XMPP Server and that the password is correct
    2. Make sure the ``default`` channel exists on the XMPP Server
    3. Make sure the executable path and command are correct
    4. Make sure the ``output_dir`` exists and is writable
    5. Make sure the ``max_running_time_seconds`` have been set to a value high enough to allow the executables to complete the jobs. 
       
       The GeoServer instance must also respect the WPS execution timings which must be configured accordingly. In order to do that access to the GeoServer Web Admin GUI.
       
          http://host:8080/geoserver/web/
       
       login as administrator (default credentials are admin/geoserver which should be changed anyway).
       
       From the Web Processing Service settings page

       .. figure:: images/python002.jpg
         :align: center

       .. figure:: images/python003.jpg
         :align: center

       The timeouts and the number of parallel executions (both async and sync) must be tuned accordingly to the execution needs.
    6. Make sure the inputs have been configured correctly for the command line execution
    
       .. code-block:: shell
       
          [Input1]
          class = param
          name = interval
          title = Elevation Interval
          type = int
          description = Elevation interval between contours.
          min = 1
          max = 1
          default = 200
          
          [Action1]
          class = cmdline
          input_ref = interval
          alias = i
          template = -name value
          
       The configuration above sets an input of type ``int`` (the expected value will be interpreted as text and declared as Literal to the WPS), which is mandatory (**min = 1**) and can have a single value (**max = 1**).
       
       The ``[Action1]`` is connected to the input through the ``input_ref`` which is equal to the ``[Input1].name``. 
       
       In the example above the action simply gets the input value specified by the user and forward it to the command line. 
       
       The final result will be something lihe this::
       
          $> /work/RemoteWPS/xmpp_data/configs/myservice/code/test.py <input_value_here>
          
       The ``[Action1].template`` property allows to specify the name of the option if required by the executable. 
       
       As an instance the following value for the ``[Action1].template``::
       
          alias = i
          template = -name value
          
       will result in something like this::
       
          $> /work/RemoteWPS/xmpp_data/configs/myservice/code/test.py -i <input_value>
          
       There exists other types of input and actions.
       
       As an instance it is possible to specify ``constant`` input types like the following one::
       
          [Const1]
          class = const
          name = workdir
          type = string
          description = Remote process sandbox working directory
          value = %(workdir)s
          
          [Action2]
          class = cmdline
          input_ref = workdir
          alias = w
          template = -name value
       
       The ``[Const1].value`` can be a constant value or a reference to the configuration file properties. 
       
       In the example above we are going to pass to the command line the full path of the process workind directory, which is a unique folder created at runtime where the RemoteWPS framework stores temporary and intermediate results of the process execution.
       
       Enabling the constant input above, the resulting command line will be something like the following one::
       
          $> /work/RemoteWPS/xmpp_data/configs/myservice/code/test.py -i <input_value> -w /share/xmpp_data/output/<exec_id>
       
       .. note:: The **<exec_id>** is known at runtime only.
       
    7. Make sure the outputs have been configured correctly for the command line execution
    
       .. code-block:: shell
       
          [Output1]
          name = result1
          type = application/zip
          description = WPS Resource Binary File
          title = SRTM
          filepath = %(workdir)s/contour.zip
          publish_as_layer = true
          publish_default_style = polygon
          publish_target_workspace = it.geosolutions
          publish_layer_name = contour
          
       In the example above we declare to the WPS only **one** output of type ``application/zip``.
       
       In this case the RemoteWPS framework expects to find a ``contour.zip`` file at the end of the execution into the working directory (see above). 
       
       There are many kind of possible outputs which can be defined here. As an instance it is possible to define an output of type ``string`` which can read the outcome from a file and stream it out as plain text.
       
       It is also possible to define several kind of binary outputs depending on the executable outcomes. 
       For more details please refer to the Remote WPS Python framework specific documentation at the end of this section.
       
    8. Make sure the regular expressions of the “stdout_parser” are correct and valid accordingly to the output of the executable

       .. code-block:: shell
       
         [Logging]
         stdout_parser = [.*\[DEBUG\](.*), .*\[INFO\] ProgressInfo\:([-+]?[0-9]*\.?[0-9]*)\%, .*\[(INFO)\](.*), .*\[(WARN)\](.*), .*\[(ERROR)\](.*), .*\[(CRITICAL)\](.*)]
         stdout_action = [ignore,          progress,                                          log,              log,              log,               abort]
         
       The example configuration above:
       
         - Ignores all ``STDOUT`` debug logs received from ``test.py``
         - Translates **as** *progress info message* any number parsed by the regex from ``STDOUT`` and sends it to GeoServer WPS.
         - Logs all ``STDOUT`` info, warn and error logs received from ``test.py``
         - Translates **as** *abort message* any keyword **CRITICAL** parsed by the regex from ``STDOUT`` and sends it to GeoServer WPS.
       
       At least **progress** and **abort** messages are mandatory in order to take track of the process execution progress and fault state.
       
A Running Example
+++++++++++++++++

In the section :ref:`extensions_wps_remote_install_example` will show how to run the example and how to parse the results in GeoServer.

ANNEX A: Remote WPS Python Wrapper Reference
++++++++++++++++++++++++++++++++++++++++++++

This section is meant to be a summary of the current possible options for the RemoteWPS Python Wrapper ``service.config`` configuration.


